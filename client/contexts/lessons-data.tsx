"use client";
import GlobalApi from "@/services/globalApi";
import { createContext, useContext, useEffect, useState } from "react";

type LessonContextProviderProps = {
  children: React.ReactNode;
};

export type Lesson = {
  course_id: number;
  title: string;
  description: string;
  lesson_url: string;
  lesson_id?: number; // Optional as it's generated by the server
  createdAt?: Date;
  updatedAt?: Date;
  duration: number;
};

type LessonContext = {
  allLessons: Lesson[];
  setAllLessons: React.Dispatch<React.SetStateAction<Lesson[]>>;
  getLessons: () => void;
  lessons: Lesson[]; // An array of Lesson objects
  setLessons: React.Dispatch<React.SetStateAction<Lesson[]>>;
  loading: boolean;
  getAllLessonsList: (course_id: string) => void;
  addLesson: (data: Omit<Lesson, "lesson_id">) => Promise<number | null>;
  lessonDetails: Lesson | undefined; // Allow undefined
  setLessonDetails: React.Dispatch<React.SetStateAction<Lesson | undefined>>; // Allow undefined
  getSingleLesson: (lesson_id: string) => void;
  updateLesson: (lesson_id: string, data: Lesson) => void;
};

const LessonContext = createContext<LessonContext | null>(null);

export function LessonContextProvider({
  children,
}: LessonContextProviderProps) {
  const [allLessons, setAllLessons] = useState<Lesson[]>([]);
  const [lessons, setLessons] = useState<Lesson[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [lessonDetails, setLessonDetails] = useState<Lesson>();

  const getLessons = () => {
    GlobalApi.getLessons().then((resp: any) => {
      setAllLessons(resp.data);
    });
  };

  const getAllLessonsList = (course_id: string) => {
    setLoading(true); // Start loading
    GlobalApi.getAllLesson(course_id)
      .then((resp: any) => {
        setLessons(resp.data);
      })
      .finally(() => {
        setLoading(false); // Stop loading once the API call completes
      });
  };

  const addLesson = async (
    data: Omit<Lesson, "lesson_id">
  ): Promise<number | null> => {
    try {
      const resp = await GlobalApi.addLesson(data);
      if (resp.data.error) {
        alert(resp.data.error);
        return null;
      } else {
        const newLesson = resp.data;
        setLessons((prevLessons) => [...prevLessons, newLesson]);
        return newLesson.lesson_id; // Return the generated lesson_id
      }
    } catch (error) {
      console.error("Error adding lesson:", error);
      return null;
    }
  };

  const getSingleLesson = (lesson_id: string) => {
    GlobalApi.getSingleLesson(lesson_id).then((resp: any) => {
      setLessonDetails(resp.data);
    });
  };

  const updateLesson = (lesson_id: string, data: Lesson) => {
    GlobalApi.updateLesson(lesson_id, data).then((resp: any) => {
      setLessonDetails(resp.data);
    });
  };

  return (
    <LessonContext.Provider
      value={{
        allLessons,
        setAllLessons,
        getLessons,
        lessons,
        setLessons,
        getAllLessonsList,
        addLesson,
        loading,
        lessonDetails,
        setLessonDetails,
        getSingleLesson,
        updateLesson,
      }}
    >
      {children}
    </LessonContext.Provider>
  );
}

export const useLessonContext = () => {
  const context = useContext(LessonContext);
  if (!context) {
    throw new Error(
      "useLessonContext must be used within a LessonContextProvider"
    );
  }
  return context;
};
